---
- name: Initial setup.
  hosts: all
  become: true
  tasks:
      - name: Ping hosts
        ansible.builtin.ping:

      - name: Update and upgrade apt packages
        ansible.builtin.apt:
            update_cache: true
            upgrade: true

- name: Install Docker.
  gather_facts: false
  hosts: all
  become: true
  tasks:
      - name: Install aptitude
        ansible.builtin.apt:
            name: aptitude
            state: present
            update_cache: true

      - name: Install required system packages
        ansible.builtin.apt:
            pkg:
                - apt-transport-https
                - ca-certificates
                - curl
            state: present
            update_cache: true

      - name: Add Docker GPG apt Key
        ansible.builtin.apt_key:
            url: https://download.docker.com/linux/ubuntu/gpg
            state: present

      - name: Add Docker Repository
        ansible.builtin.apt_repository:
            repo: deb https://download.docker.com/linux/ubuntu focal stable
            state: present

      - name: Install Docker
        ansible.builtin.apt:
            pkg:
                - docker-ce
                - docker-ce-cli
                - containerd.io
                - docker-buildx-plugin
                - docker-compose-plugin
            state: present
            update_cache: true

      - name: Test docker installation
        ansible.builtin.command:
            cmd: docker --version
        register: docker_version
        changed_when: docker_version.rc != 0

- name: Install Kubernetes
  hosts: all
  become: true
  tasks:
      - name: Delete kubectl binary from home directory
        ansible.builtin.file:
            path: /home/{{ lookup('env', 'USER') }}/kubectl
            state: absent

      - name: Delete checksum file from home directory
        ansible.builtin.file:
            path: /home/{{ lookup('env', 'USER') }}/kubectl.sha256
            state: absent

      - name: Get latest kubectl version
        ansible.builtin.uri:
            url: https://dl.k8s.io/release/stable.txt
            return_content: true
            status_code: 200, 304
        register: version

      - name: Download the latest kubectl release
        ansible.builtin.uri:
            url: https://dl.k8s.io/release/{{ version.content }}/bin/linux/amd64/kubectl
            dest: /home/{{ lookup('env', 'USER') }}
            status_code: 200, 304
        register: kubectl

      - name: Download the kubectl checksum file
        ansible.builtin.uri:
            url: https://dl.k8s.io/{{ version.content }}/bin/linux/amd64/kubectl.sha256
            dest: /home/{{ lookup('env', 'USER') }}
            status_code: 200, 304

      - name: Copy kubectl and change permissions
        ansible.builtin.copy:
            src: "{{ kubectl.path }}"
            remote_src: true
            dest: /usr/local/bin/kubectl
            owner: root
            group: root
            mode: "+x"

      - name: Check if kubectl is installed
        ansible.builtin.command:
            cmd: kubectl version --client
        register: client
        failed_when: client.rc > 1
        changed_when: client.rc != 0

      - name: Remove downloaded binaries from home
        ansible.builtin.file:
            path: /home/{{ lookup('env', 'USER') }}/kubectl
            state: absent

      - name: Remove downloaded checksums from home
        ansible.builtin.file:
            path: /home/{{ lookup('env', 'USER') }}/kubectl.sha256
            state: absent

- name: Install and Configure CockroachDB Cluster
  hosts: cockroachdb
  become: true
  vars:
      crdb_version: "v25.1.0"
      crdb_binary_url: "https://binaries.cockroachdb.com/cockroach-{{ crdb_version }}.linux-amd64.tgz"
      crdb_install_dir: "/usr/local/bin"
      crdb_data_dir: "/var/lib/cockroach"
      crdb_run_dir: "/var/run/cockroach"
      crdb_download_dest: "/tmp/cockroach-{{ crdb_version }}.linux-amd64.tgz"
      crdb_extract_dest: "/tmp"
      crdb_extracted_path: "/tmp/cockroach-{{ crdb_version }}.linux-amd64/cockroach"
      crdb_user: cockroach
      crdb_group: cockroach

  tasks:
      - name: Ensure cockroach group exists
        ansible.builtin.group:
            name: "{{ crdb_group }}"
            state: present
            system: true

      - name: Ensure cockroach user exists
        ansible.builtin.user:
            name: "{{ crdb_user }}"
            group: "{{ crdb_group }}"
            home: "{{ crdb_data_dir }}"
            shell: /sbin/nologin
            system: true
            create_home: false
            state: present

      - name: Install chrony NTP client
        ansible.builtin.package:
            name: chrony
            state: present
        register: chrony_install_result

      - name: Configure chrony to use Google NTP servers
        ansible.builtin.blockinfile:
            path: /etc/chrony/chrony.conf
            block: |
                # Google Public NTP Servers
                server time1.google.com iburst prefer
                server time2.google.com iburst
                server time3.google.com iburst
                server time4.google.com iburst
            marker: "# {mark} ANSIBLE MANAGED BLOCK - Google NTP"
            state: present
        notify: Restart chrony
        when: chrony_install_result is success

      - name: Ensure chrony service is running and enabled
        ansible.builtin.service:
            name: chrony
            state: started
            enabled: true
        when: chrony_install_result is success

      - name: Ensure target directories exist
        ansible.builtin.file:
            path: "{{ item }}"
            state: directory
            owner: "{{ crdb_user }}"
            group: "{{ crdb_group }}"
            mode: "0700"
        loop:
            - "{{ crdb_data_dir }}"

      - name: Check if CockroachDB binary already exists
        ansible.builtin.stat:
            path: "{{ crdb_install_dir }}/cockroach"
        register: cockroach_binary_stat

      - name: Ensure runtime directory exists
        ansible.builtin.file:
            path: "{{ crdb_run_dir }}"
            state: directory
            owner: "{{ crdb_user }}"
            group: "{{ crdb_group }}"
            mode: "0755"

      - name: Download CockroachDB binary archive
        ansible.builtin.get_url:
            url: "{{ crdb_binary_url }}"
            dest: "{{ crdb_download_dest }}"
            mode: "0644"
        when: not cockroach_binary_stat.stat.exists

      - name: Extract CockroachDB archive
        ansible.builtin.unarchive:
            src: "{{ crdb_download_dest }}"
            dest: "{{ crdb_extract_dest }}"
            remote_src: true
            creates: "{{ crdb_extracted_path }}"

        when:
            - not ansible_check_mode
            - not cockroach_binary_stat.stat.exists

      - name: Stat extracted binary path
        ansible.builtin.stat:
            path: "{{ crdb_extracted_path }}"
        register: crdb_extracted_stat
        when: not cockroach_binary_stat.stat.exists

      - name: Copy CockroachDB binary to install directory
        ansible.builtin.copy:
            src: "{{ crdb_extracted_path }}"
            dest: "{{ crdb_install_dir }}/cockroach"
            remote_src: true
            owner: root
            group: root
            mode: "0755"
        when:
            - not cockroach_binary_stat.stat.exists
            - crdb_extracted_stat.stat is defined and crdb_extracted_stat.stat.exists
        notify:
            - Reload systemd

      - name: Clean up downloaded archive and extracted files
        ansible.builtin.file:
            path: "{{ item }}"
            state: absent
        loop:
            - "{{ crdb_download_dest }}"
            - "/tmp/cockroach-{{ crdb_version }}.linux-amd64"
        when: not ansible_check_mode

      - name: Template CockroachDB systemd service file
        ansible.builtin.template:
            src: templates/cockroachdb.service.j2
            dest: /etc/systemd/system/cockroachdb.service
            owner: root
            group: root
            mode: "0644"
        notify:
            - Reload systemd
            - Restart cockroachdb

      - name: Ensure CockroachDB service is enabled and started
        ansible.builtin.systemd:
            name: cockroachdb
            enabled: true
            state: started
            daemon_reload: true

  handlers:
      - name: Reload systemd
        ansible.builtin.systemd:
            daemon_reload: true

      - name: Restart cockroachdb
        ansible.builtin.systemd:
            name: cockroachdb
            state: restarted

      - name: Restart chrony
        ansible.builtin.service:
            name: chrony
            state: restarted
            enabled: true

- name: Initialize the CockroachDB Cluster
  hosts: cockroachdb[0]
  become: true
  gather_facts: false

  tasks:
      - name: Initialize the cluster (runs only once)
        ansible.builtin.command:
            cmd: "{{ crdb_install_dir }}/cockroach init --insecure --host={{ ansible_host }}:26257 -v"
        register: init_result
        changed_when: init_result.rc == 0
        failed_when: init_result.rc != 0 and 'cluster has already been initialized' not in init_result.stderr
        vars:
            crdb_install_dir: "/usr/local/bin"
        delay: 10
        retries: 3
        until: init_result is success or 'cluster has already been initialized' in init_result.stderr

      - name: Display initialization result
        ansible.builtin.debug:
            var: init_result
            verbosity: 1

- name: Apply CockroachDB Enterprise License (Plain Text File - Insecure)
  hosts: cockroachdb[0]
  become: false
  gather_facts: false
  vars_files:
      - vars/crdb_secrets.yml

  vars:
      crdb_install_dir: "/usr/local/bin"

  tasks:
      - name: Set CockroachDB enterprise license key
        ansible.builtin.command:
            cmd: >-
                {{ crdb_install_dir }}/cockroach sql
                --execute="SET CLUSTER SETTING enterprise.license = '{{ crdb_enterprise_license_key }}';"
                --host={{ ansible_host }}:26257 --insecure
        register: set_license_result
        changed_when: "'cluster setting updated' in set_license_result.stdout"
