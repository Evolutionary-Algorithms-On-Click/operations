---
- name: Initial setup.
  hosts: all
  become: true
  tasks:
      - name: Ping hosts
        ansible.builtin.ping:

      - name: Update and upgrade apt packages
        ansible.builtin.apt:
            update_cache: true
            upgrade: true

- name: Install Docker.
  gather_facts: false
  hosts: all
  become: true
  tasks:
      - name: Install aptitude
        ansible.builtin.apt:
            name: aptitude
            state: present
            update_cache: true

      - name: Install required system packages
        ansible.builtin.apt:
            pkg:
                - apt-transport-https
                - ca-certificates
                - curl
            state: present
            update_cache: true

      - name: Add Docker GPG apt Key
        ansible.builtin.apt_key:
            url: https://download.docker.com/linux/ubuntu/gpg
            state: present

      - name: Add Docker Repository
        ansible.builtin.apt_repository:
            repo: deb https://download.docker.com/linux/ubuntu focal stable
            state: present

      - name: Install Docker
        ansible.builtin.apt:
            pkg:
                - docker-ce
                - docker-ce-cli
                - containerd.io
                - docker-buildx-plugin
                - docker-compose-plugin
            state: present
            update_cache: true

      - name: Test docker installation
        ansible.builtin.command:
            cmd: docker --version
        register: docker_version
        changed_when: docker_version.rc != 0

- name: Install Kubernetes
  hosts: all
  become: true
  tasks:
      - name: Delete kubectl binary from home directory
        ansible.builtin.file:
            path: /home/{{ lookup('env', 'USER') }}/kubectl
            state: absent

      - name: Delete checksum file from home directory
        ansible.builtin.file:
            path: /home/{{ lookup('env', 'USER') }}/kubectl.sha256
            state: absent

      - name: Get latest kubectl version
        ansible.builtin.uri:
            url: https://dl.k8s.io/release/stable.txt
            return_content: true
            status_code: 200, 304
        register: version

      - name: Download the latest kubectl release
        ansible.builtin.uri:
            url: https://dl.k8s.io/release/{{ version.content }}/bin/linux/amd64/kubectl
            dest: /home/{{ lookup('env', 'USER') }}
            status_code: 200, 304
        register: kubectl

      - name: Download the kubectl checksum file
        ansible.builtin.uri:
            url: https://dl.k8s.io/{{ version.content }}/bin/linux/amd64/kubectl.sha256
            dest: /home/{{ lookup('env', 'USER') }}
            status_code: 200, 304

      - name: Copy kubectl and change permissions
        ansible.builtin.copy:
            src: "{{ kubectl.path }}"
            remote_src: true
            dest: /usr/local/bin/kubectl
            owner: root
            group: root
            mode: "+x"

      - name: Check if kubectl is installed
        ansible.builtin.command:
            cmd: kubectl version --client
        register: client
        failed_when: client.rc > 1
        changed_when: client.rc != 0

      - name: Remove downloaded binaries from home
        ansible.builtin.file:
            path: /home/{{ lookup('env', 'USER') }}/kubectl
            state: absent

      - name: Remove downloaded checksums from home
        ansible.builtin.file:
            path: /home/{{ lookup('env', 'USER') }}/kubectl.sha256
            state: absent

# TODO(@Abhinav-ark): Install kubeadm, kubelet. Below tasks need em.

# - name: Kubernetes master setup.
#   hosts: master
#   become: true
#   tasks:
#       - name: Init kubectl master
#         ansible.builtin.command:
#             cmd: kubeadm init --pod-network-cidr=10.244.0.0/16
#         register: kubeadm_output
#         changed_when: kubeadm_output.rc != 0

#       - name: Setup kubectl for current user
#         ansible.builtin.command:
#             cmd: "{{ item }}"
#         loop:
#             - mkdir -p $HOME/.kube
#             - sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
#             - sudo chown $(id -u):$(id -g) $HOME/.kube/config
#         register: kubectl_setup
#         when: kubeadm_output is not failed
#         changed_when: kubectl_setup.rc != 0

# - name: Kubernetes workers setup.
#   hosts: workers
#   become: true
#   tasks:
#       - name: Join worker nodes to the cluster
#         ansible.builtin.command:
#             cmd: "{{ hostvars['master']['kubeadm_output']['stdout_lines'][0] }}"
#         when: hostvars['master']['kubeadm_output'] is not failed
#         register: join_output
#         changed_when: join_output.rc != 0
